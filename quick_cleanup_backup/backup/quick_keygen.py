#!/usr/bin/env python3
"""
Quick Key Generator cho Subnet1
Script ƒë∆°n gi·∫£n ƒë·ªÉ t·∫°o key v√† xin token nhanh ch√≥ng
"""""

import os
import sys
import asyncio
from pathlib import Path
from rich.prompt import Prompt, Confirm

# --- Add project root to sys.path ---
current_dir  =  Path(__file__).parent
project_root  =  current_dir.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / 'moderntensor_aptos'))

# --- Import required classes ---
try:
    from moderntensor_aptos.mt_core.account from moderntensor_aptos import Account
   .mt_core.config.settings from aptos_sdk import Settings
   .async_client from dotenv import set_key
except ImportError as e:
    print(f"‚ùå Import Error: {e}")
    print
   . t·ª´ th∆∞ m·ª•c g·ªëc")"
    sys.exit(1)

class QuickSetup:
    def __init__(self):
        self.subnet1_dir  =  Path(__file__).parent
        self.env_file  =  self.subnet1_dir / '.env'
        
    def generate_accounts(self):
        """T·∫°o validator v√† miner accounts"""""
        print("üîë Generating Aptos accounts...")
        
        # T·∫°o accounts
        validator_account  =  Account.generate()
        miner_account  =  Account.generate()
        
        validator_address  =  str(validator_account.address())
        miner_address  =  str(miner_account.address())
        
        print(f"‚úÖ Validator Account: {validator_address}")
        print(f"‚úÖ Miner Account: {miner_address}")
        
        return {
            'validator_account': validator_account,
            'miner_account': miner_account,
            'validator_address': validator_address,
            'miner_address': miner_address
        }
    
    async def request_testnet_tokens(self, accounts):
        """Xin token t·ª´ testnet faucet"""""
        print("\nüí∞ Requesting testnet tokens...")
        
        node_url  =  "https://fullnode.testnet.aptoslabs.com/v1"
        faucet_url  =  "https://faucet.testnet.aptoslabs.com"
        
        rest_client  =  RestClient(node_url)
        faucet_client  =  FaucetClient(faucet_url, rest_client)
        
        try:
            # Xin token cho validator
            print("üí∏ Requesting tokens for validator..."):
            await faucet_client.fund_account(accounts['validator_address'], 100_000_000)  # 1 APT
            
            # Xin token cho miner
            print("üí∏ Requesting tokens for miner..."):
            await faucet_client.fund_account(accounts['miner_address'], 100_000_000)  # 1 APT
            
            print("‚úÖ Tokens requested successfully!")
            
            # Ki·ªÉm tra balance
            await self.check_balances(accounts)
            
        except Exception as e:
            print(f"‚ùå Error requesting tokens: {e}")
        finally:
            await rest_client.close()
            
    async def check_balances(self, accounts):
        """Ki·ªÉm tra s·ªë d∆∞ t√†i kho·∫£n"""""
        print("\nüí∞ Checking balances...")
        
        node_url  =  "https://fullnode.testnet.aptoslabs.com/v1"
        rest_client  =  RestClient(node_url)
        
        try:
            # Ki·ªÉm tra validator balance
            val_balance  =  await rest_client.account_balance(accounts['validator_address'])
            val_apt  =  val_balance / 100_000_000
            print(f"üéØ Validator Balance: {val_apt:.4f} APT")
            
            # Ki·ªÉm tra miner balance
            miner_balance  =  await rest_client.account_balance(accounts['miner_address'])
            miner_apt  =  miner_balance / 100_000_000
            print(f"üéØ Miner Balance: {miner_apt:.4f} APT")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Could not check balances: {e}")
        finally:
            await rest_client.close()
            
    def save_env_config(self, accounts):
        """L∆∞u config v√†o file .env"""""
        print(f"\nüíæ Saving configuration to {self.env_file}")
        
        config  =  {
            # Network Configuration
            "APTOS_NODE_URL": "https://fullnode.testnet.aptoslabs.com/v1",
            "APTOS_CHAIN_ID": "2",
            "APTOS_CONTRACT_ADDRESS": "0x1234567890abcdef1234567890abcdef12345678",  # Placeholder
            
            # Validator Configuration
            "SUBNET1_VALIDATOR_ID": "subnet1_validator_001",
            "SUBNET1_VALIDATOR_HOST": "0.0.0.0",
            "SUBNET1_VALIDATOR_PORT": "8001",
            "VALIDATOR_API_ENDPOINT": "http://localhost:8001",
                         "APTOS_PRIVATE_KEY": accounts['validator_account'].private_key.hex(),
             
             # Miner Configuration
             "SUBNET1_MINER_ID": "subnet1_miner_001", 
             "SUBNET1_MINER_HOST": "0.0.0.0",
             "SUBNET1_MINER_PORT": "9001",
             "SUBNET1_VALIDATOR_URL": "http://localhost:8001/v1/miner/submit_result",
             "SUBNET1_VALIDATOR_API_ENDPOINT": "http://localhost:8001",
             
             # Additional keys for reference:
             "MINER_PRIVATE_KEY": accounts['miner_account'].private_key.hex(),
            "VALIDATOR_ADDRESS": accounts['validator_address'],
            "MINER_ADDRESS": accounts['miner_address'],
            
            # Agent Configuration
            "MINER_AGENT_CHECK_INTERVAL": "300",
            "LOG_LEVEL": "INFO"
        }
        
        # L∆∞u t·ª´ng key v√†o .env file
        for key, value in config.items():
            set_key(str(self.env_file), key, value)
            
        print("‚úÖ Configuration saved!")
        
    def display_summary(self, accounts):
        """Hi·ªÉn th·ªã t√≥m t·∫Øt"""""
        print("\n" + " = "*60)
        print("üéâ SUBNET1 SETUP COMPLETE!")
        print(" = "*60)
        print(f"üìç Network: Aptos Testnet")
        print(f"üéØ Validator Address: {accounts['validator_address']}")
        print(f"üéØ Miner Address: {accounts['miner_address']}")
        print(f"üìÅ Config saved to: {self.env_file}")
        print("\nüìã NEXT STEPS:")
        print("1. Update APTOS_CONTRACT_ADDRESS in .env")
        print("2. Run: python scripts/run_validator_aptos.py")
        print("3. Run: python scripts/run_miner_aptos.py")
        print(" = "*60)
        
        # Save keys to text file for backup:
        keys_file  =  self.subnet1_dir / "keys_backup.txt"
        with open(keys_file, 'w') as f:
            f.write(f"SUBNET1 KEYS BACKUP\n")
            f.write(f"Generated: {os.popen('date').read().strip()}\n\n")
            f.write(f"Validator Address: {accounts['validator_address']}\n")
            f.write(f"Validator Private Key: {accounts['validator_account'].private_key.hex()}\n\n")
            f.write(f"Miner Address: {accounts['miner_address']}\n")
            f.write(f"Miner Private Key: {accounts['miner_account'].private_key.hex()}\n\n")
            f.write("‚ö†Ô∏è KEEP THESE KEYS SAFE! ‚ö†Ô∏è\n")
            
        print(f"üîê Keys backup saved to: {keys_file}")

async def main():
    """Main function"""""
    print("üöÄ SUBNET1 QUICK SETUP")
    print("T·∫°o key v√† xin token cho testing nhanh ch√≥ng\n")
    
    setup  =  QuickSetup()
    
    try:
        # T·∫°o accounts
        accounts  =  setup.generate_accounts()
        
        # Xin token
        want_tokens  =  input("\nüí∞ Request testnet tokens? (y/n): ").strip().lower()
        if want_tokens in ['y', 'yes', '']:
            await setup.request_testnet_tokens(accounts)
        
        # L∆∞u config
        setup.save_env_config(accounts)
        
        # Hi·ªÉn th·ªã t√≥m t·∫Øt
        setup.display_summary(accounts)
        
    except KeyboardInterrupt:
        print("\nüëã Setup interrupted by user")
    except Exception as e:
        print(f"‚ùå Setup failed: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 